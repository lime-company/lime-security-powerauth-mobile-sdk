apply plugin: 'maven'
apply plugin: 'signing'

def groupId = project.GROUP_ID
def artifactId = project.ARTIFACT_ID
def version = project.VERSION_NAME

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    // options.addStringOption('Xdoclint:none', '-quiet')
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // adds libraries to classpath
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.getJavaCompiler().classpath
        }
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
	classifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}

uploadArchives {
	repositories.mavenDeployer {
		pom.groupId = groupId
		pom.artifactId = artifactId
		pom.version = version
		// Add other pom properties here if you want (developer details / licenses)
		pom.project {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
		repository(url: "file://${localReleaseDest}")
	}
}

task zipRelease(type: Zip) {
	from localReleaseDest
	destinationDir buildDir
	archiveName "release-${version}.zip"
}

task generateRelease {
    doLast {
        println "Release ${version} can be found at ${localReleaseDest}/"
        println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
    }
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)
zipRelease.dependsOn(uploadArchives)

artifacts {
	archives androidSourcesJar
	archives androidJavadocsJar
}


// signing

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName VERSION_NAME
        versionCode 1

        vectorDrawables.useSupportLibrary = true

        externalNativeBuild {
            ndkBuild {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    dependencies {
        implementation 'io.getlime.core:rest-model-base:1.1.0'
        implementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
        implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
        implementation "com.android.support:support-fragment:${rootProject.ext.supportLibVersion}"
        implementation 'com.google.code.gson:gson:2.8.5'

        // testing
        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
    }

    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

// Task to prepare OpenSSL precompiled library
task prepareOpenSSL(type: Exec) {
    workingDir '../../cc7'
    commandLine 'sh', './openssl-build/fetch.sh', 'android'
}

// Task to verify release to do not contain debug symbols
task verifyDebugSymbolsForRelease(type: Exec) {
    commandLine 'sh', '../../scripts/android-validate-build.sh', '--aar', "${buildDir}/outputs/aar/PowerAuthLibrary-release.aar"
}

afterEvaluate {
    externalNativeBuildCleanDebug.dependsOn prepareOpenSSL
    externalNativeBuildCleanRelease.dependsOn prepareOpenSSL
    preBuild.dependsOn prepareOpenSSL
    verifyDebugSymbolsForRelease.dependsOn install
    bintrayUpload.dependsOn verifyDebugSymbolsForRelease
}

apply from: 'android-release-aar.gradle'
